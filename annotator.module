<?php

/**
 * Implements hook_init().       
 */
function annotator_init() {
  if (user_access('administer annotations') ||
      user_access('view own annotations') ||
      user_access('create annotations')) {

    if (module_exists('locale')) {
      drupal_add_library('annotator', 'jsgettext', TRUE);
    }
    drupal_add_library('annotator', 'annotator', TRUE);
    drupal_add_js(drupal_get_path('module', 'annotator') . '/js/annotator.js');
    
    annotator_execute_plugins();
    if($node_types = annotator_node_type_settings()) {
      drupal_add_js(array('annotator_enabled_node_types' => (array) $node_types), 'setting');
    }
    if($dom_selector = annotator_dom_selector_settings()) {
      drupal_add_js(array('annotator_selector' => (array) $dom_selector), 'setting');
    }
  }
}

/**
 * Implements hook_permission().
 */
function annotator_permission() {
  return array(
    'create annotations' => array(
      'title' => t('Create annotations'),
      'description' => t('Allows users to annotation tasks.'),
      'restrict access' => TRUE,
    ),
    'view all annotations' => array(
      'title' => t('View all annotations'),
      'description' => t('Allows users to view all annotations.'),
      'restrict access' => TRUE,
    ),
    'view own annotations' => array(
      'title' => t('View own annotations'),
      'description' => t('Allows users to view own annotations.'),
      'restrict access' => TRUE,
    ),
    'edit any annotations' => array(
      'title' => t('Edit any annotations'),
      'description' => t('Allows users to edit any annotations.'),
      'restrict access' => TRUE,
    ),
    'edit own annotations' => array(
      'title' => t('Edit own annotation'),
      'description' => t('Allows users to edit own annotations.'),
      'restrict access' => TRUE,
    ),
    'administer annotations' => array(
      'title' => t('Administer annotations'),
      'description' => t('Allows users to administer annotations.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function annotator_menu() {
  $items = array();
  $items['admin/config/media/annotator'] = array(
    'title' => 'Annotator',
    'description' => 'Annotator settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('annotator_admin'),
    'access arguments' => array('administer annotations'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'annotator.pages.inc',
  );
  $items['admin/config/media/annotator/plugins'] = array(
    'title' => t('Annotator Plugin Setup'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-10',
  );
  $items['admin/config/media/annotator/general'] = array(
    'title' => t('General Setup'),
    'description' => t('General Annotator Setup'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('annotator_admin_general'),
    'access arguments' => array('administer annotations'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'annotator.pages.inc',
    'weight' => '0',
  );
  return $items;
}

/**
 * Implements hook_library().
 */
function annotator_library() {
  $libraries['annotator'] = array(
    'title' => 'Annotator',
    'website' => 'http://okfnlabs.org/annotator/',
    'version' => '1.2.6',
    'js' => array(
      './sites/all/libraries/annotator/annotator-full.min.js' => array(),
    ),
    'css' => array(
      './sites/all/libraries/annotator/annotator.min.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    ),
  );
  $libraries['jsgettext'] = array(
    'title' => 'Javascript Gettext',
    'website' => 'http://jsgettext.berlios.de/',
    'version' => '0.08',
    'js' => array(
      './sites/all/libraries/jsgettext/lib/Gettext.js' => array(),
    ),
  );
  $libraries['showdown'] = array(
    'title' => 'Showdown',
    'website' => 'https://github.com/coreyti/showdown',
    'version' => '0.3.1',
    'js' => array(
      './sites/all/libraries/showdown/showdown.js' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function annotator_ctools_plugin_directory($module, $plugin) {
  if ($module == 'annotator') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function annotator_ctools_plugin_type() {
  return array(
    'annotator' => array(
      'cache' => FALSE,
    ),
  );
}

/**
 * Execute ctools plugins
 */
function annotator_execute_plugins($annotation = NULL, $op = NULL) {
  ctools_include('plugins');
  $annotator_plugins = variable_get('annotator_plugins', array());
  foreach ($annotator_plugins as $name => $enabled) {
    if ((boolean) $enabled) {
      $plugin = ctools_get_plugins('annotator', 'annotator', $name . 'AnnotatorPlugin');
      $class = ctools_plugin_get_class($plugin, 'handler');
      if (class_exists($class)) {
        $instance = new $class($plugin);
        $instance->setup();

        if ($annotation && $op) {
          $instance->alter($annotation, $op);
        }
      }
    }
  }
}

/**
 * Implements hook_TYPE_alter().
 */
function annotator_annotation_alter($entity, $op) {
  annotator_execute_plugins($entity, $op);
}

/**
 * Returns a list of available node types for suitable for checkbox options
 * in a 'machine_name' => 'name' format
 */
function annotator_get_available_node_types() {
  $options = array();
  $types = node_type_get_types();
  
  foreach($types as $key => $type) {
    $options[$key] = $type->name;
  }
  
  return $options;
}

/**
 * Return node types in jQuery useable format, eg '.node-type-[node-type]'
 */
function annotator_node_type_settings() {
  $classes = array();
  $types = variable_get('annotator_enabled_node_types');
  
  foreach($types as $key => $type) {
    if($type) {
      // Replace underscores with hyphens to match the node type classes
      $type = str_replace('_', '-', $type);
      $classes[] = '.node-type-' . $type;
    }
  }
  if(!empty($classes)) {
    return $classes;
  }
  return FALSE;
}

/**
 * Return dom selectors in a jQuery useable format, eg. '.[selector]'
 */
function annotator_dom_selector_settings() {
  $class = '';
  $selector = variable_get('annotator_dom_selector');
  // Annotator only seems to work when it is instantiated once per page.
  // To try to help facilitate this, we're only going to use the first selector 
  // listed, if someone has entered a comma separated list.
  list($selector) = explode(',', $selector);
  $class = $selector;
  
  if($class !== '') {
    return $class;
  }
  return FALSE;
}